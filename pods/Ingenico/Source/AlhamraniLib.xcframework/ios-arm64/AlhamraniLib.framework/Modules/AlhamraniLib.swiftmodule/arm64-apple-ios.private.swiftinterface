// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name AlhamraniLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AlhamraniLib
import Foundation
import Swift
import _Concurrency
import _StringProcessing
public protocol AlhamraniDelegate : AnyObject {
  func didReceiveResponse(_response: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers public class Alhamrani : ObjectiveC.NSObject {
  weak public var delegate: AlhamraniLib.AlhamraniDelegate?
  public func connectToDevice(device_ip: Swift.String) -> Swift.Bool
  public func sendECRRequest(device_ip: Swift.String, msg_id: Swift.String, amount: Swift.String, ecr_no: Swift.String, ecr_receipt_no: Swift.String, field1: Swift.String, field2: Swift.String, field3: Swift.String, field4: Swift.String, field5: Swift.String)
  public func checkDevice(device_ip: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class UDPClient : AlhamraniLib.Socket {
  override public init(address: Swift.String, port: Swift.Int32)
  open func send(data: [AlhamraniLib.Byte]) -> AlhamraniLib.Result
  open func send(string: Swift.String) -> AlhamraniLib.Result
  open func enableBroadcast()
  open func send(data: Foundation.Data) -> AlhamraniLib.Result
  open func recv(_ expectlen: Swift.Int) -> ([AlhamraniLib.Byte]?, Swift.String, Swift.Int)
  open func close()
  @objc deinit
}
@_inheritsConvenienceInitializers open class UDPServer : AlhamraniLib.Socket {
  override public init(address: Swift.String, port: Swift.Int32)
  open func recv(_ expectlen: Swift.Int) -> ([AlhamraniLib.Byte]?, Swift.String, Swift.Int)
  open func close()
  @objc deinit
}
public typealias Byte = Swift.UInt8
open class Socket {
  final public let address: Swift.String
  public var port: Swift.Int32 {
    get
  }
  public var fd: Swift.Int32? {
    get
  }
  public init(address: Swift.String, port: Swift.Int32)
  @objc deinit
}
public enum SocketError : Swift.Error {
  case queryFailed
  case connectionClosed
  case connectionTimeout
  case unknownError
  public static func == (a: AlhamraniLib.SocketError, b: AlhamraniLib.SocketError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Result {
  case success
  case failure(Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
@_inheritsConvenienceInitializers open class TCPClient : AlhamraniLib.Socket {
  open func connect(timeout: Swift.Int) -> AlhamraniLib.Result
  open func close()
  open func send(data: [AlhamraniLib.Byte]) -> AlhamraniLib.Result
  open func send(string: Swift.String) -> AlhamraniLib.Result
  open func send(data: Foundation.Data) -> AlhamraniLib.Result
  open func read(_ expectlen: Swift.Int, timeout: Swift.Int = -1) -> [AlhamraniLib.Byte]?
  open func bytesAvailable() -> Swift.Int32?
  override public init(address: Swift.String, port: Swift.Int32)
  @objc deinit
}
@_inheritsConvenienceInitializers open class TCPServer : AlhamraniLib.Socket {
  open func listen() -> AlhamraniLib.Result
  open func accept(timeout: Swift.Int32 = 0) -> AlhamraniLib.TCPClient?
  open func close()
  override public init(address: Swift.String, port: Swift.Int32)
  @objc deinit
}
extension AlhamraniLib.SocketError : Swift.Equatable {}
extension AlhamraniLib.SocketError : Swift.Hashable {}
